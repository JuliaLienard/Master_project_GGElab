#!/usr/bin/ python3
"""
Author : Julia Lienard 
Date : 2025/03/26

Description: This script will filter for a given gene the SqantiQC generated tappAS-like gff3 and the tama merge
trans_report.txt

The necessary input files in the following order are:
    1) list of transcript ID corrresponding to the gene of interest
        - provided by merging the output from "Filter_highly_Express_transcripts_FLNC.qmd" with the neoantigens.list
        - OR generated by the bash command :
       cat tappAS-like.gff3 | grep -w "Name=gene_name;" | awk -F "\t" '{print$1}' > transcript_ID.txt
       if several genes need to be filtered, use this command:
        cat tappAS-like.gff3 | grep -w -e "Name=gene1;" -e "Name=gene2;" | awk -F "\t" '{print$1}' > transcript_ID.txt
        These commands are based on the current format of the tappAS-like.gff3

    2) tappAS-like.gff3 generated from the sample by IsoAnnotLite
    3) the prefix for the filtered tappAS-like.gff3 output from this script
    4) the tama merge trans_report.txt

Procedure:
    - a set list of the transcript ID selected is generated from transcript_ID.txt
    - the IsoAnnotLite sample_tappas.gff3 is filtered based on this set list and output
    - the tama merge trans_report.txt is filtered based on this set list and output
  
Usage: python script.py transcript_ID.txt SQ3_tappAS.gff3 output_prefix_name tama_trans_report.txt

The script can filter as many corresponding genes as the user wants, as long as the transcript_ID.txt list 
contains the corresponding associated transcripts.
"""

import sys 

transcript_ID_gene = sys.argv[1]
SQ3_tappAS_gff3 = sys.argv[2]
basename = sys.argv[3]
transcript_report = sys.argv[4]


with open(transcript_ID_gene, "r") as list_transcripts:
    transcript_ID = set()
    for line in list_transcripts:
        ID = line.strip()
        transcript_ID.add(ID)
    print(f'The number of unique transcript ID for the selected gene is {len(transcript_ID)}')

with open(SQ3_tappAS_gff3, "r") as GFF3, open(basename + "tappAS.gff3", "w") as outputGFF3:
    for Line in GFF3:
        row = Line.strip().split("\t")
        SeqName = row[0]
        if SeqName in transcript_ID:
            outputGFF3.write(f'{Line}')

# This following line can be deactivate if the transcript_report does not need filtering + inactivate above transcript_report = sys.argv[4]
with open(transcript_report, "r") as tama_report, open(basename + "_tama_trans_report.txt", "w") as outputTrans:
    first_line = tama_report.readline().strip()  # Read first line and remove extra spaces/newlines
    outputTrans.write(f'{first_line}\n') # printing header line
    for line in tama_report:
        row = line.strip().split("\t")
        trans_ID = row[0]
        if trans_ID in transcript_ID:
            outputTrans.write(f'{line}')

print("done!")

# verify the outputTrans and outputGFF3 for the number of unique transcripts:
    # cat ./FILE | awk -F "\t" '{print$1}' | sort | uniq |wc -l
    